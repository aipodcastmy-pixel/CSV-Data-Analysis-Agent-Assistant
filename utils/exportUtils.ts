import { CsvData } from '../types';

declare const htmlToImage: any;
declare const Papa: any;

export const exportToPng = async (element: HTMLElement, title: string) => {
  try {
    const dataUrl = await htmlToImage.toPng(element, { 
      backgroundColor: '#1f2937', // Match card background
      pixelRatio: 2,
    });
    const link = document.createElement('a');
    link.download = `${title.replace(/ /g, '_')}.png`;
    link.href = dataUrl;
    link.click();
  } catch (error) {
    console.error('Error exporting to PNG:', error);
  }
};

export const exportToCsv = (data: CsvData, title: string) => {
  try {
    const csv = Papa.unparse(data);
    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.setAttribute('download', `${title.replace(/ /g, '_')}.csv`);
    link.click();
  } catch (error) {
    console.error('Error exporting to CSV:', error);
  }
};

export const exportToHtml = async (element: HTMLElement, title: string, data: CsvData, summary: string) => {
   try {
    const chartCanvas = element.querySelector('canvas');
    if (!chartCanvas) {
        throw new Error("Chart canvas not found for export.");
    }
    const chartImage = chartCanvas.toDataURL('image/png');

    const dataTableHtml = `
      <table border="1" style="border-collapse: collapse; width: 100%; font-family: sans-serif; color: #333;">
        <thead>
          <tr style="background-color: #f2f2f2;">
            ${Object.keys(data[0]).map(key => `<th style="padding: 8px;">${key}</th>`).join('')}
          </tr>
        </thead>
        <tbody>
          ${data.map(row => `
            <tr>
              ${Object.values(row).map(val => `<td style="padding: 8px;">${val}</td>`).join('')}
            </tr>
          `).join('')}
        </tbody>
      </table>
    `;
    const summaryHtml = summary.replace(/\n/g, '<br>').replace('---', '<hr>');

    const htmlContent = `
      <!DOCTYPE html>
      <html lang="en">
        <head>
          <meta charset="UTF-8">
          <title>${title}</title>
          <style> body { font-family: sans-serif; line-height: 1.6; padding: 20px; } h1, h2 { color: #111827; } .card { border: 1px solid #ddd; padding: 20px; border-radius: 8px; margin-bottom: 20px; } </style>
        </head>
        <body>
          <h1>Analysis Report: ${title}</h1>
          <div class="card">
            <h2>Chart</h2>
            <img src="${chartImage}" alt="Chart for ${title}" style="max-width: 100%; border: 1px solid #ddd; border-radius: 4px;">
          </div>
          <div class="card">
            <h2>AI Summary</h2>
            <p>${summaryHtml}</p>
          </div>
          <div class="card">
            <h2>Data</h2>
            ${dataTableHtml}
          </div>
          <p style="font-size: 0.8em; color: #888;">Generated by CSV AI Assistant on ${new Date().toLocaleString()}</p>
        </body>
      </html>
    `;
    
    const blob = new Blob([htmlContent], { type: 'text/html;charset=utf-8;' });
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.setAttribute('download', `Report_${title.replace(/ /g, '_')}.html`);
    link.click();
  } catch (error) {
    console.error('Error exporting to HTML:', error);
  }
};